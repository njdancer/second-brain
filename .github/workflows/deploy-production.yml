name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment type'
        required: true
        type: choice
        options:
          - release
          - hotfix
        default: 'release'

permissions:
  contents: write
  deployments: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Install pnpm
        run: corepack prepare pnpm@9.0.0 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type check
        run: pnpm run type-check

      - name: Run unit tests
        run: pnpm test -- --coverage --ci

      - name: Run E2E tests
        run: pnpm run test:e2e

      - name: Check coverage thresholds
        run: |
          STATEMENTS=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
          FUNCTIONS=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')
          echo "Statement coverage: $STATEMENTS%"
          echo "Function coverage: $FUNCTIONS%"
          if (( $(echo "$STATEMENTS < 95" | bc -l) )); then
            echo "❌ Statement coverage ($STATEMENTS%) is below 95% threshold"
            exit 1
          fi
          if (( $(echo "$FUNCTIONS < 95" | bc -l) )); then
            echo "❌ Function coverage ($FUNCTIONS%) is below 95% threshold"
            exit 1
          fi
          echo "✅ Coverage thresholds met"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    environment:
      name: production
      url: https://second-brain-mcp.nick-01a.workers.dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine next version from git tags
        id: version
        run: |
          YEAR=$(date +%y)
          DEPLOYMENT_TYPE="${{ github.event.inputs.deployment_type }}"

          # Get all tags for current year
          TAGS=$(git tag --list "v${YEAR}.*" | sort -V)

          if [ -z "$TAGS" ]; then
            # First release of the year
            VERSION="${YEAR}.1.0"
          else
            # Parse latest tag
            LATEST_TAG=$(echo "$TAGS" | tail -1)
            LATEST_VERSION=${LATEST_TAG#v}

            # Split version into components
            IFS='.' read -r TAG_YEAR RELEASE HOTFIX <<< "$LATEST_VERSION"

            if [ "$DEPLOYMENT_TYPE" == "release" ]; then
              # Increment RELEASE, reset HOTFIX
              RELEASE=$((RELEASE + 1))
              HOTFIX=0
            else
              # Increment HOTFIX
              HOTFIX=$((HOTFIX + 1))
            fi

            VERSION="${YEAR}.${RELEASE}.${HOTFIX}"
          fi

          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version: v$VERSION (type: $DEPLOYMENT_TYPE)"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Install pnpm
        run: corepack prepare pnpm@9.0.0 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy to Cloudflare Workers (Production)
        id: deploy
        run: pnpm run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}

      - name: Wait for deployment to stabilize
        run: |
          echo "Waiting 30 seconds for edge propagation..."
          sleep 30

      - name: Health check
        id: health_check
        run: |
          echo "Checking health endpoint..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://second-brain-mcp.nick-01a.workers.dev/health || echo "000")

          if [ "$RESPONSE" == "200" ]; then
            echo "✅ Health check passed (HTTP $RESPONSE)"
            echo "HEALTH_STATUS=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Health check failed (HTTP $RESPONSE)"
            echo "HEALTH_STATUS=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Create git tag after successful deployment
        if: success()
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${VERSION}" -m "Release v${VERSION} - Production Deployment"
          git push origin "v${VERSION}"

      - name: Create GitHub Release
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          gh release create "v${VERSION}" \
            --title "Release v${VERSION}" \
            --notes "## Release v${VERSION}

          **Deployed to production:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          **Deployment type:** ${{ github.event.inputs.deployment_type }}

          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed release notes.

          ### Test Coverage
          - Statement coverage: 95%+
          - Function coverage: 95%+
          - All tests passing

          ### Deployment
          - Environment: Production
          - Worker URL: https://second-brain-mcp.nick-01a.workers.dev
          - Commit: ${{ github.sha }}"

      - name: Create deployment summary
        if: always()
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          if [ "${{ job.status }}" == "success" ]; then
            echo "### 🚀 Deployment Successful (Production)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
            echo "**Version:** v${VERSION}" >> $GITHUB_STEP_SUMMARY
            echo "**Deployment Type:** ${{ github.event.inputs.deployment_type }}" >> $GITHUB_STEP_SUMMARY
            echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "**Deployed at:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://second-brain-mcp.nick-01a.workers.dev" >> $GITHUB_STEP_SUMMARY
            echo "**Git Tag:** v${VERSION}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Deployment Failed (Production)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The deployment to production has failed. Please check the logs." >> $GITHUB_STEP_SUMMARY
            echo "**No git tag was created** (tags are only created on successful deployment)" >> $GITHUB_STEP_SUMMARY
          fi
