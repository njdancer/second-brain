name: Rollback

on:
  workflow_dispatch:
    inputs:
      version_id:
        description: 'Cloudflare deployment version ID or "latest" to rollback one version'
        required: false
        type: string
        default: 'latest'
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - production
          - development
        default: 'production'
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

permissions:
  contents: read
  deployments: write

jobs:
  confirm-rollback:
    name: Confirm Rollback
    runs-on: ubuntu-latest
    outputs:
      should_proceed: ${{ steps.confirm.outputs.should_proceed }}

    steps:
      - name: Display rollback details
        id: confirm
        run: |
          echo "### ⚠️ Rollback Requested" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version ID:** ${{ github.event.inputs.version_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ github.event.inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "**Requested by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Proceeding with instant rollback..." >> $GITHUB_STEP_SUMMARY
          echo "should_proceed=true" >> $GITHUB_OUTPUT

  rollback:
    name: Execute Instant Rollback
    runs-on: ubuntu-latest
    needs: confirm-rollback
    if: needs.confirm-rollback.outputs.should_proceed == 'true'
    environment:
      name: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code (for wrangler config only)
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Install pnpm
        run: corepack prepare pnpm@9.0.0 --activate

      - name: Install dependencies (for wrangler)
        run: pnpm install --frozen-lockfile

      - name: Get Cloudflare deployment history
        id: get-deployments
        run: |
          WORKER_NAME="second-brain-mcp"
          if [ "${{ github.event.inputs.environment }}" == "development" ]; then
            WORKER_NAME="second-brain-mcp-dev"
          fi

          echo "Fetching deployment history for: $WORKER_NAME"

          # List recent deployments (wrangler deployments list shows version IDs)
          pnpm wrangler deployments list --name "$WORKER_NAME" > deployments.txt 2>&1 || true
          cat deployments.txt

          # Extract version IDs for rollback
          if [ "${{ github.event.inputs.version_id }}" == "latest" ]; then
            # Get the second most recent deployment (to rollback from current to previous)
            VERSION_ID=$(cat deployments.txt | grep -v "Created on" | grep -v "Version ID" | grep -v "^$" | head -2 | tail -1 | awk '{print $1}')
          else
            VERSION_ID="${{ github.event.inputs.version_id }}"
          fi

          echo "target_version_id=$VERSION_ID" >> $GITHUB_OUTPUT
          echo "### 🎯 Rollback Target" >> $GITHUB_STEP_SUMMARY
          echo "Version ID: $VERSION_ID" >> $GITHUB_STEP_SUMMARY
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}

      - name: Perform instant rollback (Production)
        if: github.event.inputs.environment == 'production'
        run: |
          echo "Rolling back to version: ${{ steps.get-deployments.outputs.target_version_id }}"
          pnpm wrangler rollback --version-id "${{ steps.get-deployments.outputs.target_version_id }}"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}

      - name: Perform instant rollback (Development)
        if: github.event.inputs.environment == 'development'
        run: |
          echo "Rolling back to version: ${{ steps.get-deployments.outputs.target_version_id }}"
          pnpm wrangler rollback --env development --version-id "${{ steps.get-deployments.outputs.target_version_id }}"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}

      - name: Update GitHub Deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ github.event.inputs.environment }}';

            // Create inactive deployment for rollback
            await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: environment,
              description: 'Rollback to version ${{ steps.get-deployments.outputs.target_version_id }}',
              auto_merge: false,
              required_contexts: [],
              task: 'rollback',
              transient_environment: false
            });

      - name: Create rollback summary
        run: |
          echo "### ✅ Rollback Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Rolled back to:** Version ${{ steps.get-deployments.outputs.target_version_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ github.event.inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "**Executed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Completed at:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ℹ️ **Note:** Rollback was instant using Cloudflare's rollback feature." >> $GITHUB_STEP_SUMMARY
          echo "No code checkout, tests, or rebuild was required." >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "### ❌ Rollback Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Version:** ${{ github.event.inputs.version_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ github.event.inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The instant rollback has failed. Manual intervention may be required." >> $GITHUB_STEP_SUMMARY
          echo "Please check Cloudflare dashboard or use wrangler CLI directly." >> $GITHUB_STEP_SUMMARY

  verify-rollback:
    name: Verify Rollback
    runs-on: ubuntu-latest
    needs: rollback
    if: always() && needs.rollback.result == 'success'

    steps:
      - name: Checkout code (for config extraction)
        uses: actions/checkout@v4

      - name: Extract deployment URL
        id: config
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            # Production worker name
            WORKER_NAME=$(grep -E '^name = "([^"]+)"' wrangler.toml | head -1 | sed -E 's/name = "([^"]+)"/\1/')
          else
            # Development worker name
            WORKER_NAME=$(grep -E '^\[env\.development\]' -A 10 wrangler.toml | grep -E '^name = "([^"]+)"' | sed -E 's/name = "([^"]+)"/\1/')
          fi

          URL="https://${WORKER_NAME}.${{ vars.CLOUDFLARE_SUBDOMAIN }}.workers.dev/health"
          echo "health_url=$URL" >> $GITHUB_OUTPUT
          echo "Deployment URL: $URL"

      - name: Wait for CDN propagation
        run: sleep 10

      - name: Health check
        run: |
          URL="${{ steps.config.outputs.health_url }}"
          echo "Checking health endpoint: $URL"

          # Retry health check up to 3 times with 10 second delays
          MAX_RETRIES=3
          RETRY_COUNT=0
          SUCCESS=false

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $URL || echo "000")

            if [ "$RESPONSE" == "200" ]; then
              echo "✅ Health check passed (HTTP $RESPONSE)"
              SUCCESS=true
              break
            fi

            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "⏳ Health check failed (HTTP $RESPONSE), retrying in 10 seconds... (Attempt $RETRY_COUNT/$MAX_RETRIES)"
              sleep 10
            fi
          done

          if [ "$SUCCESS" = true ]; then
            echo "### ✅ Rollback Verification Passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The service is healthy after instant rollback." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Health check failed after $MAX_RETRIES attempts (HTTP $RESPONSE)"
            echo "### ❌ Rollback Verification Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Health check returned HTTP $RESPONSE after rollback." >> $GITHUB_STEP_SUMMARY
            echo "Manual investigation required." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Create incident report
        if: success()
        run: |
          cat << EOF > rollback-report.md
          # Rollback Incident Report

          **Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          **Environment:** ${{ github.event.inputs.environment }}
          **Rolled back to:** Version ${{ needs.rollback.outputs.target_version_id || github.event.inputs.version_id }}
          **Executed by:** ${{ github.actor }}

          ## Reason
          ${{ github.event.inputs.reason }}

          ## Status
          ✅ Instant rollback completed successfully (< 1 minute)
          ✅ Health check passed

          ## Technical Details
          - Method: Cloudflare instant rollback
          - No code checkout required
          - No tests run (instant rollback to verified version)
          - No rebuild required

          ## Next Steps
          1. Investigate root cause of the issue that required rollback
          2. Fix the issue in code
          3. Add tests to prevent regression
          4. Deploy fix through normal release process

          EOF

          echo "📝 Incident report created"
          cat rollback-report.md >> $GITHUB_STEP_SUMMARY

      - name: Upload rollback report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: rollback-report-${{ github.event.inputs.environment }}-${{ github.run_number }}
          path: rollback-report.md
          retention-days: 90
