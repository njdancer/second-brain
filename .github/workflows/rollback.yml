name: Rollback

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to rollback to (e.g., v1.0.0)'
        required: true
        type: string
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - production
          - development
        default: 'production'
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

jobs:
  confirm-rollback:
    name: Confirm Rollback
    runs-on: ubuntu-latest
    outputs:
      should_proceed: ${{ steps.confirm.outputs.should_proceed }}

    steps:
      - name: Display rollback details
        id: confirm
        run: |
          echo "### ⚠️ Rollback Requested" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Version:** ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ github.event.inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "**Requested by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Proceeding with rollback..." >> $GITHUB_STEP_SUMMARY
          echo "should_proceed=true" >> $GITHUB_OUTPUT

  rollback:
    name: Execute Rollback
    runs-on: ubuntu-latest
    needs: confirm-rollback
    if: needs.confirm-rollback.outputs.should_proceed == 'true'
    environment:
      name: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout target version
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Install pnpm
        run: corepack prepare pnpm@9.0.0 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests on target version
        run: pnpm test -- --ci
        continue-on-error: false

      - name: Deploy to Cloudflare Workers (Production)
        if: github.event.inputs.environment == 'production'
        run: pnpm deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy to Cloudflare Workers (Development)
        if: github.event.inputs.environment == 'development'
        run: pnpm run deploy:dev
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Create rollback summary
        run: |
          echo "### ✅ Rollback Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Rolled back to:** ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ github.event.inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "**Executed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Completed at:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "### ❌ Rollback Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Version:** ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ github.event.inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The rollback has failed. Manual intervention may be required." >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs and consider manual deployment using wrangler CLI." >> $GITHUB_STEP_SUMMARY

  verify-rollback:
    name: Verify Rollback
    runs-on: ubuntu-latest
    needs: rollback
    if: always() && needs.rollback.result == 'success'

    steps:
      - name: Wait for deployment to stabilize
        run: sleep 30

      - name: Health check
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            URL="https://second-brain.your-subdomain.workers.dev/health"
          else
            URL="https://second-brain-dev.your-subdomain.workers.dev/health"
          fi

          echo "Checking health endpoint: $URL"
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $URL || echo "000")

          if [ "$RESPONSE" == "200" ]; then
            echo "✅ Health check passed (HTTP $RESPONSE)"
            echo "### ✅ Rollback Verification Passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The service is healthy after rollback to ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Health check failed (HTTP $RESPONSE)"
            echo "### ❌ Rollback Verification Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Health check returned HTTP $RESPONSE after rollback." >> $GITHUB_STEP_SUMMARY
            echo "Manual investigation required." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Create incident report
        if: success()
        run: |
          cat << EOF > rollback-report.md
          # Rollback Incident Report

          **Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          **Environment:** ${{ github.event.inputs.environment }}
          **Rolled back to:** ${{ github.event.inputs.version }}
          **Executed by:** ${{ github.actor }}

          ## Reason
          ${{ github.event.inputs.reason }}

          ## Status
          ✅ Rollback completed successfully
          ✅ Health check passed

          ## Next Steps
          1. Investigate root cause of the issue that required rollback
          2. Fix the issue in code
          3. Add tests to prevent regression
          4. Deploy fix through normal release process

          EOF

          echo "📝 Incident report created"
          cat rollback-report.md >> $GITHUB_STEP_SUMMARY

      - name: Upload rollback report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: rollback-report-${{ github.event.inputs.environment }}-${{ github.run_number }}
          path: rollback-report.md
          retention-days: 90
