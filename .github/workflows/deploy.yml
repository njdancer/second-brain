name: Deploy

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - development
          - production
        default: 'development'

permissions:
  contents: write
  deployments: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Install pnpm
        run: corepack prepare pnpm@9.0.0 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type check
        run: pnpm run type-check

      - name: Run tests
        run: pnpm test -- --coverage --ci

      - name: Check coverage thresholds
        run: |
          STATEMENTS=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
          FUNCTIONS=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')
          echo "Statement coverage: $STATEMENTS%"
          echo "Function coverage: $FUNCTIONS%"
          if (( $(echo "$STATEMENTS < 95" | bc -l) )); then
            echo "❌ Statement coverage ($STATEMENTS%) is below 95% threshold"
            exit 1
          fi
          if (( $(echo "$FUNCTIONS < 95" | bc -l) )); then
            echo "❌ Function coverage ($FUNCTIONS%) is below 95% threshold"
            exit 1
          fi
          echo "✅ Coverage thresholds met"

  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development'
    environment:
      name: development
      url: https://second-brain-dev.your-subdomain.workers.dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Install pnpm
        run: corepack prepare pnpm@9.0.0 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy to Cloudflare Workers (Development)
        run: pnpm run deploy:dev
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}

      - name: Create deployment summary
        run: |
          echo "### 🚀 Deployment Successful (Development)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Development" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed at:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://second-brain.your-subdomain.workers.dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Install pnpm
        run: corepack prepare pnpm@9.0.0 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy to Cloudflare Workers (Production)
        run: pnpm run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}

      - name: Extract version from tag
        if: startsWith(github.ref, 'refs/tags/v')
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ steps.version.outputs.VERSION }}" \
            --notes "## Release ${{ steps.version.outputs.VERSION }}

          **Deployed to production:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')

          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed release notes.

          ### Test Coverage
          - Statement coverage: 95%+
          - Function coverage: 95%+
          - 265+ tests passing

          ### Deployment
          - Environment: Production
          - Worker URL: https://second-brain-mcp.nick-01a.workers.dev"

      - name: Create deployment summary
        run: |
          echo "### 🚀 Deployment Successful (Production)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "**Version:** ${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
            echo "**Tag:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed at:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "### ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The deployment to production has failed. Please check the logs and consider running a rollback if necessary." >> $GITHUB_STEP_SUMMARY

  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))

    steps:
      - name: Health check
        run: |
          echo "Waiting 30 seconds for deployment to stabilize..."
          sleep 30

          # Check health endpoint
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://second-brain-mcp.nick-01a.workers.dev/health || echo "000")

          if [ "$RESPONSE" == "200" ]; then
            echo "✅ Health check passed (HTTP $RESPONSE)"
            echo "### ✅ Deployment Verification Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Health check failed (HTTP $RESPONSE)"
            echo "### ❌ Deployment Verification Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Health check returned HTTP $RESPONSE. Consider running a rollback." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
