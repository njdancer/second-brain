name: Deploy to Development

on:
  push:
    branches:
      - main
      - 'hotfix/**'

permissions:
  contents: write
  deployments: write
  pull-requests: write

jobs:
  type-check:
    name: Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Install pnpm
        run: corepack prepare pnpm@9.0.0 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type check
        run: pnpm run type-check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Install pnpm
        run: corepack prepare pnpm@9.0.0 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test -- --coverage --ci --silent

      - name: Report code coverage
        uses: clearlyip/code-coverage-report-action@v5
        if: always()
        with:
          filename: 'coverage/clover.xml'
          badge: true
          fail_on_negative_difference: true
          # No overall_coverage_fail_threshold - use trend-based monitoring only

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Install pnpm
        run: corepack prepare pnpm@9.0.0 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run E2E tests
        run: pnpm run test:e2e

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Install pnpm
        run: corepack prepare pnpm@9.0.0 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint

      - name: Check formatting
        run: pnpm run format

  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [type-check, unit-tests, e2e-tests, lint]
    environment:
      name: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract configuration
        id: config
        run: |
          # Read Node.js version from .mise.toml
          NODE_VERSION=$(grep -E '^node = "([0-9]+)"' .mise.toml | sed -E 's/node = "([0-9]+)"/\1/')
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT

          # Read development worker name from wrangler.toml
          WORKER_NAME=$(grep -E '^\[env\.development\]' -A 10 wrangler.toml | grep -E '^name = "([^"]+)"' | sed -E 's/name = "([^"]+)"/\1/')
          echo "worker_name=$WORKER_NAME" >> $GITHUB_OUTPUT

          # Build deployment URL
          DEPLOYMENT_URL="https://${WORKER_NAME}.${{ vars.CLOUDFLARE_SUBDOMAIN }}.workers.dev"
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

          echo "✅ Configuration extracted:"
          echo "  Node.js version: $NODE_VERSION"
          echo "  Worker name: $WORKER_NAME"
          echo "  Deployment URL: $DEPLOYMENT_URL"

      - name: Check for hotfix mode (main branch only)
        if: github.ref == 'refs/heads/main'
        id: check_hotfix
        uses: actions/github-script@v7
        with:
          script: |
            // Get all open PRs and filter client-side (API label filter has caching issues)
            const { data: allPrs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            const hotfixPrs = allPrs.filter(pr =>
              pr.labels.some(label => label.name === 'hotfix')
            );

            if (hotfixPrs.length > 0) {
              const pr = hotfixPrs[0];
              core.notice(`⚠️ Development deployment blocked - hotfix in progress: ${pr.html_url}`);

              // Post comment to the commit
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: `## ⚠️ Development Deployment Skipped

            Development environment is in **hotfix mode**.

            **Active Hotfix PR:** ${pr.html_url}

            Development deployments from \`main\` are blocked while a hotfix incident is active. The development environment will track the hotfix branch until the incident is resolved.

            Normal development deployments will resume when the hotfix PR is merged.`
              });

              core.setFailed('Development deployment blocked due to active hotfix PR');
            }

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.config.outputs.node_version }}

      - name: Enable Corepack
        run: corepack enable

      - name: Install pnpm
        run: corepack prepare pnpm@9.0.0 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Inject version information
        run: |
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          COMMIT_SHA="${{ github.sha }}"

          # Replace placeholders in version.ts
          sed -i "s/__VERSION__/dev/g" src/version.ts
          sed -i "s/__COMMIT_SHA__/$COMMIT_SHA/g" src/version.ts
          sed -i "s/__BUILD_TIME__/$BUILD_TIME/g" src/version.ts
          sed -i "s/__ENVIRONMENT__/development/g" src/version.ts

          echo "✅ Injected version information:"
          echo "  Version: dev"
          echo "  Commit: ${COMMIT_SHA:0:7}"
          echo "  Build Time: $BUILD_TIME"
          echo "  Environment: development"

      - name: Create GitHub deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'development',
              description: 'Development deployment from ${{ github.ref_name }}',
              auto_merge: false,
              required_contexts: [],
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'in_progress',
              description: 'Deploying to Cloudflare Workers',
              environment_url: '${{ steps.config.outputs.deployment_url }}',
            });

            return deployment.data.id;

      - name: Deploy to Cloudflare Workers (Development)
        id: deploy
        run: pnpm run deploy:dev
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}

      - name: Update deployment status (success)
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              description: 'Deployment successful',
              environment_url: '${{ steps.config.outputs.deployment_url }}',
            });

      - name: Update deployment status (failure)
        if: failure() && steps.deployment.outputs.result
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure',
              description: 'Deployment failed',
              environment_url: '${{ steps.config.outputs.deployment_url }}',
            });

      - name: Create deployment summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "### 🚀 Deployment Successful (Development)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Environment:** Development" >> $GITHUB_STEP_SUMMARY
            echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "**Deployed at:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** ${{ steps.config.outputs.deployment_url }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Deployment Failed (Development)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The deployment to development has failed. Please check the logs." >> $GITHUB_STEP_SUMMARY
          fi
