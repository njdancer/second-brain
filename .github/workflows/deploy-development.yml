name: Deploy to Development

on:
  push:
    branches:
      - main
      - 'hotfix/**'

permissions:
  contents: write
  deployments: write
  pull-requests: write

jobs:
  type-check:
    name: Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Install pnpm
        run: corepack prepare pnpm@9.0.0 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type check
        run: pnpm run type-check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Install pnpm
        run: corepack prepare pnpm@9.0.0 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test -- --coverage --ci

      - name: Check coverage thresholds
        run: |
          STATEMENTS=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
          FUNCTIONS=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')
          echo "Statement coverage: $STATEMENTS%"
          echo "Function coverage: $FUNCTIONS%"
          if (( $(echo "$STATEMENTS < 95" | bc -l) )); then
            echo "❌ Statement coverage ($STATEMENTS%) is below 95% threshold"
            exit 1
          fi
          if (( $(echo "$FUNCTIONS < 95" | bc -l) )); then
            echo "❌ Function coverage ($FUNCTIONS%) is below 95% threshold"
            exit 1
          fi
          echo "✅ Coverage thresholds met"

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Install pnpm
        run: corepack prepare pnpm@9.0.0 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run E2E tests
        run: pnpm run test:e2e

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Install pnpm
        run: corepack prepare pnpm@9.0.0 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint

      - name: Check formatting
        run: pnpm run format

  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [type-check, unit-tests, e2e-tests, lint]
    environment:
      name: development
      url: https://second-brain-dev.your-subdomain.workers.dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for hotfix mode (main branch only)
        if: github.ref == 'refs/heads/main'
        id: check_hotfix
        uses: actions/github-script@v7
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'hotfix'
            });

            if (prs.length > 0) {
              const pr = prs[0];
              core.notice(`⚠️ Development deployment blocked - hotfix in progress: ${pr.html_url}`);

              // Post comment to the commit
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: `## ⚠️ Development Deployment Skipped

            Development environment is in **hotfix mode**.

            **Active Hotfix PR:** ${pr.html_url}

            Development deployments from \`main\` are blocked while a hotfix incident is active. The development environment will track the hotfix branch until the incident is resolved.

            Normal development deployments will resume when the hotfix PR is merged.`
              });

              core.setFailed('Development deployment blocked due to active hotfix PR');
            }

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Install pnpm
        run: corepack prepare pnpm@9.0.0 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Inject version information
        run: |
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          COMMIT_SHA="${{ github.sha }}"

          # Replace placeholders in version.ts
          sed -i "s/__VERSION__/dev/g" src/version.ts
          sed -i "s/__COMMIT_SHA__/$COMMIT_SHA/g" src/version.ts
          sed -i "s/__BUILD_TIME__/$BUILD_TIME/g" src/version.ts
          sed -i "s/__ENVIRONMENT__/development/g" src/version.ts

          echo "✅ Injected version information:"
          echo "  Version: dev"
          echo "  Commit: ${COMMIT_SHA:0:7}"
          echo "  Build Time: $BUILD_TIME"
          echo "  Environment: development"

      - name: Deploy to Cloudflare Workers (Development)
        id: deploy
        run: pnpm run deploy:dev
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}

      - name: Create deployment summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "### 🚀 Deployment Successful (Development)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Environment:** Development" >> $GITHUB_STEP_SUMMARY
            echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "**Deployed at:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** https://second-brain-dev.your-subdomain.workers.dev" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Deployment Failed (Development)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The deployment to development has failed. Please check the logs." >> $GITHUB_STEP_SUMMARY
          fi
