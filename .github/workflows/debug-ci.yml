name: Debug CI Hanging

# Manual trigger only - for parallel debugging
on:
  workflow_dispatch:
  push:
    branches: [debug/**]

jobs:
  # Strategy 1: Skip type-check, just run tests
  test-only:
    name: "Tests Only (Skip Type-Check)"
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: corepack enable
      - run: corepack prepare pnpm@9.0.0 --activate
      - run: pnpm install --frozen-lockfile

      # SKIP type-check, go straight to tests
      - name: Run tests without type-check
        timeout-minutes: 5
        run: pnpm test -- --ci --maxWorkers=2

  # Strategy 2: Type-check with verbose diagnostics
  typecheck-verbose:
    name: "Type-Check with Diagnostics"
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: corepack enable
      - run: corepack prepare pnpm@9.0.0 --activate
      - run: pnpm install --frozen-lockfile

      - name: Type-check with extended diagnostics
        timeout-minutes: 3
        run: |
          echo "Starting type-check with diagnostics..."
          pnpm exec tsc --noEmit --extendedDiagnostics --diagnostics
          echo "Type-check completed!"

  # Strategy 3: Type-check individual files
  typecheck-incremental:
    name: "Type-Check Individual Files"
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: corepack enable
      - run: corepack prepare pnpm@9.0.0 --activate
      - run: pnpm install --frozen-lockfile

      - name: Type-check files individually
        timeout-minutes: 5
        run: |
          echo "Checking index.ts..."
          pnpm exec tsc --noEmit src/index.ts || echo "FAILED: index.ts"

          echo "Checking mcp-api-handler.ts..."
          timeout 30s pnpm exec tsc --noEmit src/mcp-api-handler.ts || echo "FAILED/HUNG: mcp-api-handler.ts"

          echo "Checking oauth-ui-handler.ts..."
          timeout 30s pnpm exec tsc --noEmit src/oauth-ui-handler.ts || echo "FAILED/HUNG: oauth-ui-handler.ts"

          echo "Checking logger.ts..."
          timeout 30s pnpm exec tsc --noEmit src/logger.ts || echo "FAILED/HUNG: logger.ts"

          echo "Checking mcp-transport.ts..."
          timeout 30s pnpm exec tsc --noEmit src/mcp-transport.ts || echo "FAILED/HUNG: mcp-transport.ts"

          echo "All checks completed!"

  # Strategy 4: Use node moduleResolution instead of bundler
  typecheck-node-resolution:
    name: "Type-Check with Node Resolution"
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: corepack enable
      - run: corepack prepare pnpm@9.0.0 --activate
      - run: pnpm install --frozen-lockfile

      - name: Create tsconfig with node resolution
        run: |
          cat > tsconfig.temp.json << 'EOF'
          {
            "extends": "./tsconfig.json",
            "compilerOptions": {
              "moduleResolution": "node"
            }
          }
          EOF

      - name: Type-check with node resolution
        timeout-minutes: 3
        run: |
          echo "Type-checking with moduleResolution: node..."
          pnpm exec tsc --noEmit --project tsconfig.temp.json
          echo "Type-check completed!"

  # Strategy 5: Check for circular dependencies
  check-circular-deps:
    name: "Check Circular Dependencies"
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: corepack enable
      - run: corepack prepare pnpm@9.0.0 --activate
      - run: pnpm install --frozen-lockfile
      - run: pnpm add -D madge

      - name: Check for circular dependencies
        run: |
          echo "Checking for circular dependencies..."
          pnpm exec madge --circular --extensions ts src/ || echo "Circular dependencies found"

          echo "Dependency graph:"
          pnpm exec madge --extensions ts src/

  # Strategy 6: Different Node versions
  test-node-18:
    name: "Node 18 (Type-Check + Tests)"
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - run: corepack enable
      - run: corepack prepare pnpm@9.0.0 --activate
      - run: pnpm install --frozen-lockfile
      - name: Run type-check
        timeout-minutes: 3
        run: pnpm run type-check
      - name: Run tests
        timeout-minutes: 5
        run: pnpm test -- --ci --maxWorkers=2

  # Strategy 7: Tests with different Jest strategies
  test-serial:
    name: "Tests Serial (runInBand)"
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: corepack enable
      - run: corepack prepare pnpm@9.0.0 --activate
      - run: pnpm install --frozen-lockfile
      - run: pnpm run type-check

      - name: Run tests serially
        timeout-minutes: 5
        run: pnpm test -- --ci --runInBand

  # Strategy 8: Test individual test suites
  test-high-risk-suites:
    name: "Test High-Risk Suites Individually"
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: corepack enable
      - run: corepack prepare pnpm@9.0.0 --activate
      - run: pnpm install --frozen-lockfile
      - run: pnpm run type-check

      - name: Test backup suite
        timeout-minutes: 2
        run: timeout 90s pnpm test test/unit/backup.test.ts || echo "HUNG: backup"

      - name: Test storage suite
        timeout-minutes: 2
        run: timeout 90s pnpm test test/unit/storage.test.ts || echo "HUNG: storage"

      - name: Test mcp-transport suite
        timeout-minutes: 2
        run: timeout 90s pnpm test test/unit/mcp-transport.test.ts || echo "HUNG: mcp-transport"

      - name: Test integration suite
        timeout-minutes: 2
        run: timeout 90s pnpm test test/integration/tool-sequences.test.ts || echo "HUNG: integration"

  # Strategy 9: Ubuntu 24.04 (latest)
  test-ubuntu-latest:
    name: "Ubuntu 24.04 (Latest)"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: corepack enable
      - run: corepack prepare pnpm@9.0.0 --activate
      - run: pnpm install --frozen-lockfile
      - name: Run type-check
        timeout-minutes: 3
        run: pnpm run type-check
      - name: Run tests
        timeout-minutes: 5
        run: pnpm test -- --ci --maxWorkers=2

  # Strategy 10: Skip lib check
  typecheck-skip-lib:
    name: "Type-Check with --skipLibCheck"
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: corepack enable
      - run: corepack prepare pnpm@9.0.0 --activate
      - run: pnpm install --frozen-lockfile

      - name: Type-check with skipLibCheck
        timeout-minutes: 3
        run: |
          echo "Type-checking with --skipLibCheck..."
          pnpm exec tsc --noEmit --skipLibCheck
          echo "Type-check completed!"

  # Summary job
  summary:
    name: "Debug Summary"
    runs-on: ubuntu-22.04
    needs: [test-only, typecheck-verbose, typecheck-incremental, typecheck-node-resolution, check-circular-deps, test-node-18, test-serial, test-high-risk-suites, test-ubuntu-latest, typecheck-skip-lib]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "# Debug CI Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Strategy | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tests Only (Skip Type-Check) | ${{ needs.test-only.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type-Check with Diagnostics | ${{ needs.typecheck-verbose.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type-Check Individual Files | ${{ needs.typecheck-incremental.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type-Check with Node Resolution | ${{ needs.typecheck-node-resolution.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Check Circular Dependencies | ${{ needs.check-circular-deps.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Node 18 | ${{ needs.test-node-18.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests Serial | ${{ needs.test-serial.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test High-Risk Suites | ${{ needs.test-high-risk-suites.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Ubuntu 24.04 | ${{ needs.test-ubuntu-latest.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type-Check Skip Lib | ${{ needs.typecheck-skip-lib.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- If 'Tests Only' succeeds but type-checks fail → TypeScript issue" >> $GITHUB_STEP_SUMMARY
          echo "- If 'Node Resolution' succeeds but standard fails → moduleResolution: bundler issue" >> $GITHUB_STEP_SUMMARY
          echo "- If individual files identify specific file → focus on that file's types" >> $GITHUB_STEP_SUMMARY
          echo "- If circular deps found → fix circular imports" >> $GITHUB_STEP_SUMMARY
